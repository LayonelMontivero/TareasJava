import java.util.ArrayList;

// Interfaz Promocionable
interface Promocionable {
    void aplicarPromocion();
}

// Clase abstracta Vuelo
abstract class Vuelo {
    protected String numeroVuelo;
    protected String origen;
    protected String destino;
    protected String fecha;

    public Vuelo(String numeroVuelo, String origen, String destino, String fecha) {
        this.numeroVuelo = numeroVuelo;
        this.origen = origen;
        this.destino = destino;
        this.fecha = fecha;
    }

    public abstract double calcularPrecio();  // Método abstracto para calcular el precio

    @Override
    public String toString() {
        return "Vuelo: " + numeroVuelo + " | Origen: " + origen + " | Destino: " + destino + " | Fecha: " + fecha;
    }
}

// Clase VueloRegular que hereda de Vuelo
class VueloRegular extends Vuelo implements Promocionable {
    private int numeroAsientos;
    private double precioBasePorAsiento;

    public VueloRegular(String numeroVuelo, String origen, String destino, String fecha, int numeroAsientos, double precioBasePorAsiento) {
        super(numeroVuelo, origen, destino, fecha);
        this.numeroAsientos = numeroAsientos;
        this.precioBasePorAsiento = precioBasePorAsiento;
    }

    @Override
    public double calcularPrecio() {
        return numeroAsientos * precioBasePorAsiento; // Precio total para vuelo regular
    }

    @Override
    public void aplicarPromocion() {
        // Aplicar un 10% de descuento en vuelos regulares
        double descuento = calcularPrecio() * 0.10;
        System.out.println("Aplicando promoción: Descuento de 10% en vuelo regular. Descuento: $" + descuento);
    }

    @Override
    public String toString() {
        return super.toString() + " | Tipo: Vuelo Regular | Asientos: " + numeroAsientos + " | Precio por Asiento: $" + precioBasePorAsiento;
    }
}

// Clase VueloCharter que hereda de Vuelo
class VueloCharter extends Vuelo implements Promocionable {
    private double precioTotal;

    public VueloCharter(String numeroVuelo, String origen, String destino, String fecha, double precioTotal) {
        super(numeroVuelo, origen, destino, fecha);
        this.precioTotal = precioTotal;
    }

    @Override
    public double calcularPrecio() {
        return precioTotal; // Precio total para vuelo charter
    }

    @Override
    public void aplicarPromocion() {
        // Aplicar un 15% de descuento en vuelos charter
        double descuento = precioTotal * 0.15;
        System.out.println("Aplicando promoción: Descuento de 15% en vuelo charter. Descuento: $" + descuento);
    }

    @Override
    public String toString() {
        return super.toString() + " | Tipo: Vuelo Charter | Precio Total: $" + precioTotal;
    }
}

// Clase Reservas que maneja una lista de vuelos
class Reservas {
    private ArrayList<Vuelo> vuelos;

    public Reservas() {
        vuelos = new ArrayList<>();
    }

    public void agregarVuelo(Vuelo vuelo) {
        vuelos.add(vuelo);
    }

    public double calcularPrecioTotal() {
        double total = 0;
        for (Vuelo vuelo : vuelos) {
            total += vuelo.calcularPrecio();
        }
        return total;
    }

    public void aplicarPromociones() {
        for (Vuelo vuelo : vuelos) {
            if (vuelo instanceof Promocionable) {
                ((Promocionable) vuelo).aplicarPromocion();  // Aplicar promoción solo a vuelos promocionables
            }
        }
    }

    public void mostrarVuelos() {
        for (Vuelo vuelo : vuelos) {
            System.out.println(vuelo);
        }
    }
}

// Clase SistemaReservas con el main
public class SistemaReservas {
    public static void main(String[] args) {
        // Crear objetos de vuelo
        VueloRegular vuelo1 = new VueloRegular("A123", "Buenos Aires", "Madrid", "2024-12-01", 150, 300);
        VueloCharter vuelo2 = new VueloCharter("B456", "Buenos Aires", "Miami", "2024-12-10", 5000);

        // Crear un sistema de reservas
        Reservas sistemaReservas = new Reservas();

        // Agregar vuelos
        sistemaReservas.agregarVuelo(vuelo1);
        sistemaReservas.agregarVuelo(vuelo2);

        // Mostrar información de vuelos
        System.out.println("Información de Vuelos:");
        sistemaReservas.mostrarVuelos();

        // Calcular el precio total de las reservas
        System.out.println("\nPrecio total de las reservas: $" + sistemaReservas.calcularPrecioTotal());

        // Aplicar promociones
        System.out.println("\nAplicando promociones a los vuelos:");
        sistemaReservas.aplicarPromociones();

        // Mostrar el precio total después de aplicar las promociones
        System.out.println("\nNuevo precio total de las reservas después de aplicar promociones: $" + sistemaReservas.calcularPrecioTotal());
    }
}
